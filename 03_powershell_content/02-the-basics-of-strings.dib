#!markdown

# The Basics of Strings

## What is a String?

A string is a sequence of characters. A handy metaphor is a friendship bracelet, where you string together letters to make a name.

#!markdown

## Strings and String Literals

`firstFriend` and `secondFriend` are variables of strings. The last line is also a string. It's a **string literal**. A string literal is text what represents a constant string.

> Try that out with the following code. Press play and see what comes out.
>
> Next, try changing the variables to see different names.

#!pwsh

$firstFriend = "Alys"
$secondFriend = "Rosario"

"My friends are ${firstFriend} and ${secondFriend}"

#!markdown

## String Properties

As you explore more with strings, you'll find that strings are more than a collection of letters. You can find the length of a string using `Length`. `Length` is a **property** of a string and it returns the number of characters in that string.

> Try that out by seeing how long the names of the friends are:

#!pwsh

"The name $firstFriend has $($firstFriend.Length) letters."
"The name $secondFriend has $($secondFriend.Length) letters."

#!markdown

# String Methods

## Leading and Trailing Spaces

Suppose your strings have leading or trailing spaces (also called **white space**) that you don't want to display. You want to trim the spaces from the strings. The `Trim` method and related methods `TrimStart` and `TrimEnd` do that work. You can just use those methods to remove leading and trailing spaces.

> Play around with trimming in the following code.

#!pwsh

$greeting = "      Hello World!       "
$greeting

$trimmedGreeting = $greeting.TrimStart()
$trimmedGreeting

$trimmedGreeting = $greeting.TrimEnd()
$trimmedGreeting

$trimmedGreeting = $greeting.Trim()
$trimmedGreeting

#!markdown

## Replace

You can also replace substrings with other values. For example, in the code below, you can take "Hello World!" and replace "Hello" with "Greetings", to make "Greetings World!"

> Try it out. What else could you replace "Hello" with?

#!pwsh

$sayHello = "Hello World!";
$sayHello
$sayHello = $sayHello.Replace("Hello", "Greetings");
$sayHello

#!markdown

## Changing Case

Sometimes you need your strings to be all UPPERCASE or all lowercase. `ToUpper` and `ToLower` do just that.
> The following example seems a bit mixed up. Can you fix it so "whisper" is all lowercase, and "shout" is all uppercase?

#!pwsh

"WhiSPer".ToUpper()
"sHoUt".ToLower()

#!markdown

# Playground

Now it's your turn to play around with what you've learned. Try these exercises:
> Create three variables of three different people.
>
> Find the length of the first person, make the second person all caps, and the third person all lowercase.
>
> How many letters are in "supercalifragilisticexpialidocious"?
>
> How many characters are taken out when you trim "       friendship bracelet     "? Does trimming take out the center space?
>
> What do you want to write?

#!pwsh

"Playground"
"supercalifragilisticexpialidocious"
"       friendship bracelet     "

#!pwsh

# creating three variables of three different people
$personOne = "Tinky Winky"
$personTwo = "Dipsy"
$personThree = "Po"

# length of first person, second all CAPS and third all lower
$personOneTrim = $personOne.Replace(" ","")

"The name $personOne has $($personOneTrim.Length) letters."
$personTwo.ToUpper()
$personThree.ToLower()

# supercalifragilisticexpialidocious
$word = "supercalifragilisticexpialidocious"
"There are $($word.Length) letters in $word!"

# trim
$phrase = "       friendship bracelet     "
$trimmed = $phrase.trim()
$trimmedPhrase = $($trimmed.Length)
$noSpaces = $phrase.Replace(" ", "")

"When you use trim() it only removes the white spaces at either end and not anything in the middle. So the if you used trim() on '$phrase', it would leave you with '$trimmed' and if you were to then count the number of characters with .Length you would get $trimmedPhrase as it will include the space in the middle. But if you want to remove all white spaces, including the one in the middle, before counting the number of characters, you can use .Replace to replace the spaces with no spaces. In this instance, the number of characters for '$trimmed' without any spaces at all would be $($noSpaces.Length)."

#!markdown

# Other resources

Here's some more places to explore:
> [Microsoft Learn](https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.2)
>
> [PowerShell Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/?view=powershell-7)
