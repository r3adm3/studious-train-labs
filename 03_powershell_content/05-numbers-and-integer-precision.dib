#!markdown

# Numbers and Integer Precision

Like you learned in the last module, when doing math with integers, you only get integers as a result, no decimals or fractions. The numbers are `truncated`, which just means that the remainder is cut off. You can find the remainder with `%`, the remainder operator. The remainder is the left over amount from a division problem.
> Lets try it out!

#!pwsh

$a = 7
$b = 4
$c = 3
$d = [Math]::Truncate(($a + $b) / $c)
$e = ($a + $b) % $c
"quotient: $d"
"remainder: $e"

#!markdown

What is this saying? Well when you take 11 and divide it by 3, there are 3 3s that fit into 11, with two leftover, or remaining. That's why 3 is the quotient, and 2 is the remainder

## Minimum and Maximum Integer Size

Because of how integers are structured in coding, there is a limit to their size.
> Find out what it is by running the following code!

#!pwsh

$max = [int]::MaxValue
$min = [int]::MinValue
"The range of integers is $min to $max"

#!markdown

That's still a pretty big range!
> But what happens if you try to go beyond?

#!pwsh

[int]$what = $max + 3

# "An example of overflow: $what"

#!markdown

That number, which should be really big, causes PowerShell to error.

## Doubles: Precision and Size

Doubles are another form of numbers. They can hold and answer in floating point.
> Repeat the same code from the beginning, and see the difference a double makes.

#!pwsh

$a = 7
$b = 4
$c = 3
[double]$d = ($a + $b) / $c
$e = ($a + $b) % $c
"quotient: $d"
"remainder: $e"

#!markdown

> Here's a more complicated expression to try:

#!pwsh

$a = 19
$b = 23
$c = 8
$d = ($a + $b) / $c
$d

#!markdown

> Find out the range of doubles:

#!pwsh

$max = [double]::MaxValue
$min = [double]::MinValue;
"The range of double is $min to $max"

#!markdown

That's pretty big! Much larger than integers.

Of course, doubles aren't perfect. They also have rounding errors.
> Check out this rounding:

#!pwsh

$third = 1.0 / 3.0;
$third

#!markdown

Technically, 1/3 converted to decimal should be 3 repeating infinitely, but that isn't practical in coding. It's good to be aware of though, if you're working in extremely precise variables.

#!markdown

# Playground

Play around with what you've learned! Here's some starting ideas:
> Got any homework or projects you need to do math in? Try out using code in place of a calculator.
>
> The moon is 238,855 miles away from Earth. If you were using the distance to the moon in a coding problem, would you need to use integers or doubles? What if you were measuring in inches? What about the sun? It's 92,955,828 miles away.
>
> If a person was stuck using integers, how might they print out a division problem in a mixed fraction format?

#!pwsh

"Playground"

#!markdown

# Other resources

Here's some more places to explore:
> [Microsoft Learn](https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.2)
>
> [PowerShell Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/?view=powershell-7)
