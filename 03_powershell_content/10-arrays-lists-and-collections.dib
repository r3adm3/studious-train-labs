#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

# Arrays, Lists, and Collections

#!markdown

Arrays, lists, and collections can be pretty useful. Try looking at a list:
> Run the following code. Does it print out what you expected?

#!pwsh

$names = "<name>", "Ana", "Felipe" 

foreach ($name in $names) {
    "Hello $($name.ToUpper())!"
}

#!markdown

## So what does that code mean?

- In the `$names` variable you're making a list of strings in the form of array.
- **foreach**: This is another for loop! It goes through every item in a list.
- **name in names**: This is a style that a lot of people prefer. `$names` is the whole list that contains plural names. `$name` is an individual item in `$names`.

#!markdown

## Alternative method

The previous code is a bit more clear to read for human than the code below, but the code below has some more recognizable code, based off of what we've learned.
These are really just two different styles of writing the same code. Feel free to use whatever makes the most sense to you!
> Run the following code.
>
> Can you identify similar parts of code between the two different methods?
>
> Which method do you prefer?

#!pwsh

for($i = 0; $i -lt $names.Count; $i++) {
    $name = $names[$i]
    "Hello $($name.ToUpper())!"
}

#!markdown

## Add

You can add names to lists pretty easily. Lists have the method `Add()`, which tacks on a new item to the end of the list.

To be able to add to a list we need to change the type of collection from *Array* to *List*. The reason is that arrays are not re-sizeable. Using arrays we would need to create a new array with different size and copy the elements to it. *ArrayList* is a particular implementation of a *List* which offers addition with automatic re-sizing under the hood.
> Run the code.
>
> Then try adding your own name instead.

#!pwsh

[System.Collections.ArrayList]$names = "<name>", "Ana", "Felipe" 

$null = $names.Add('Sophia')

foreach ($name in $names) {
    "Hello $($name.ToUpper())!"
}

#!markdown

## Remove

You can also remove names. Try that out:

> Run the code.
>
> Then choose which name you want removed.
>
> What happens when you try to remove something that isn't there?

#!pwsh

$null = $names.Remove("<name>")

for($i = 0; $i -lt $names.Count; $i++) {
    $name = $names[$i]
    "Hello $($name.ToUpper())!"
}

#!markdown

## Printing a specific item

What if you don't want to print out all of your friends? What if you just want to print out one friend? That's where brackets come in.
> Run the code.
>
> Try printing a different spot in the list.
>
> Do you need a 0 or 1 to print the first item in a list?

#!pwsh

$names = "<name>", "Sophia", "Felipe"

$names[1]

#!markdown

Don't forget that lists are "0" based. The first spot is the "0th" spot.

#!markdown

# Playground

Play around with what you've learned! Here's some starting ideas:
> Make a list of groceries you need called `groceries`.
>
> Can you print out "buy \<grocery\>!" for every item?
>
> What's the 3rd item of the list? Is that the same as `groceries[3]?`
>
> Make sure to add "toothpaste".
>
> Remove your least favorite item.
>
> Now what's third on the list?

#!pwsh

"Playground"

#!markdown

# Other resources

Here's some more places to explore:
> [Microsoft Learn](https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.2)
>
> [PowerShell Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/?view=powershell-7)
